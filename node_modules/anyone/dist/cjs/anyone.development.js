'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vestUtils = require('vest-utils');

/**
 * Accepts a value or a function, and coerces it into a boolean value
 */
function run(arg) {
    if (vestUtils.isFunction(arg)) {
        try {
            return check(arg());
        }
        catch (err) {
            return false;
        }
    }
    return check(arg);
}
function check(value) {
    // We use abstract equality intentionally here. This enables falsy valueOf support.
    return Array.isArray(value) ? true : value != false && Boolean(value);
}

/**
 * Checks that at all passed arguments evaluate to a truthy value.
 */
function all() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return args.every(run);
}

/**
 * Checks that at least one passed argument evaluates to a truthy value.
 */
function any() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return args.some(run);
}

/**
 * Checks that at none of the passed arguments evaluate to a truthy value.
 */
function none() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return args.every(vestUtils.bindNot(run));
}

/**
 * Checks that at only one passed argument evaluates to a truthy value.
 */
function one() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var count = 0;
    for (var i = 0; i < args.length; i++) {
        if (run(args[i])) {
            count++;
        }
        if (count > 1) {
            return false;
        }
    }
    return count === 1;
}

exports.all = all;
exports.any = any;
exports.none = none;
exports.one = one;
