(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vest-utils')) :
  typeof define === 'function' && define.amd ? define(['vest-utils'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.none = factory(global["vest-utils"]));
})(this, (function (vestUtils) { 'use strict';

  /**
   * Accepts a value or a function, and coerces it into a boolean value
   */
  function run(arg) {
      if (vestUtils.isFunction(arg)) {
          try {
              return check(arg());
          }
          catch (err) {
              return false;
          }
      }
      return check(arg);
  }
  function check(value) {
      // We use abstract equality intentionally here. This enables falsy valueOf support.
      return Array.isArray(value) ? true : value != false && Boolean(value);
  }

  /**
   * Checks that at none of the passed arguments evaluate to a truthy value.
   */
  function none() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      return args.every(vestUtils.bindNot(run));
  }

  return none;

}));
